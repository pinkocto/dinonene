{
  
    
        "post0": {
            "title": "여러그림 그리기",
            "content": "여러그림 그리기, Anscombe&#39;s quartet . toc:true | branch: master | badges: true | comments: true | author: dinonene | . - (1/2) 여러그림그리기 . - (2/2) Anscombe&#39;s quartet . &#50668;&#47084;&#44536;&#47548; &#44536;&#47532;&#44592; . (1) &#44217;&#52432;&#44536;&#47532;&#44592; . import numpy as np import matplotlib.pyplot as plt . x=np.arange(-5,5,0.1) y=2*x+np.random.normal(loc=0,scale=1,size=100) plt.plot(x,y,&#39;.b&#39;) plt.plot(x,2*x,&#39;--r&#39;) . [&lt;matplotlib.lines.Line2D at 0x1d11fdc7790&gt;] . (2) &#46384;&#47196;&#44536;&#47532;&#44592; -subplots . x=[1,2,3,4] y=[1,2,4,3] _, axs = plt.subplots(2,2) axs[0,0].plot(x,y,&#39;o:r&#39;) axs[0,1].plot(x,y,&#39;xb&#39;) axs[1,0].plot(x,y,&#39;xm&#39;) axs[1,1].plot(x,y,&#39;.--k&#39;) . [&lt;matplotlib.lines.Line2D at 0x1d120034b20&gt;] . . Note: fmt = [marker][line][color] . plt.subplots?? # using the variable ax for single a Axes fig, ax = plt.subplots() # using the variable axs for multiple Axes fig, axs = plt.subplots(2, 2) # using tuple unpacking for multiple Axes fig, (ax1, ax2) = plt.subplots(1, 2) fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2) fig = figure(**fig_kw) axs = fig.subplots(nrows=nrows, ncols=ncols, sharex=sharex, sharey=sharey, squeeze=squeeze, subplot_kw=subplot_kw, gridspec_kw=gridspec_kw) return fig, axs . subplots의 리턴값이 $ tt{(fig,axs)}$ 이 나오게 된다. 우리는 뒤의 axs만 관심이 있으므로 앞의 fig는 _로 처리한다. | . Anscombe&#39;s quartet . - 교훈: 데이터를 분석하기 전에 항상 시각화를 하라. . x = [10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5] y1 = [8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68] y2 = [9.14, 8.14, 8.74, 8.77, 9.26, 8.10, 6.13, 3.10, 9.13, 7.26, 4.74] y3 = [7.46, 6.77, 12.74, 7.11, 7.81, 8.84, 6.08, 5.39, 8.15, 6.42, 5.73] x4 = [8, 8, 8, 8, 8, 8, 8, 19, 8, 8, 8] y4 = [6.58, 5.76, 7.71, 8.84, 8.47, 7.04, 5.25, 12.50, 5.56, 7.91, 6.89] . _, axs = plt.subplots(2,2) axs[0,0].plot(x,y1,&#39;o&#39;, color=&#39;orange&#39;) axs[0,1].plot(x,y2,&#39;o&#39;, color=&#39;orange&#39;) axs[1,0].plot(x,y3,&#39;o&#39;, color=&#39;orange&#39;) axs[1,1].plot(x4,y4,&#39;o&#39;, color=&#39;orange&#39;) . [&lt;matplotlib.lines.Line2D at 0x1d1217c8ee0&gt;] . - 상관계수를 잠깐 복습해보자. . 상관계수는 -1~1 사이의 값을 가진다. (코쉬슈바르츠 부등식을 사용하여 증명가능) | 완전한 직선이라면 상관계수가 1 또는 -1이다. | 상관계수가 1에 가까우면 양의 상관관계에 있다고 말하고 -1에 가까우면 음의 상관관계에 있다고 말한다. | . - 의문: 자료의 모양이 직선모양에 가까우면 상관계수가 큰 것이 맞나? . $x,y$ 값이 모두 큰 하나의 관측치가 상관계수값을 키울 수 있지 않나? | . - 상관계수가 좋은 것은 맞나? (=상관계수는 두 변수의 관계를 설명하기에 충분히 적절한 통계량인가?) . n=len(x) xtilde = (x-np.mean(x)) / (np.std(x)*np.sqrt(n)) ## x표준화 y1tilde = (y1-np.mean(y1)) / (np.std(y1)*np.sqrt(n)) ## y1표준화 . sum(xtilde*y1tilde) . 0.81642051634484 . np.corrcoef(x,y1) . array([[1. , 0.81642052], [0.81642052, 1. ]]) . np.corrcoef([x,y1,y2,y3]) . array([[1. , 0.81642052, 0.81623651, 0.81628674], [0.81642052, 1. , 0.7500054 , 0.46871668], [0.81623651, 0.7500054 , 1. , 0.58791933], [0.81628674, 0.46871668, 0.58791933, 1. ]]) . np.corrcoef([x4,y4]) . array([[1. , 0.81652144], [0.81652144, 1. ]]) . - 위의 4개의 그림에 대한 상관계수는 모두 같다. (0.81652) . - 상관계수는 두 변수의 관계를 설명하기에 부적절하다. . 상관계수는 1번그림과 같이 두 변수가 선형관계에 있을 때 그 정도를 나타내는 통계량일 뿐이다. | 선형관계가 아닌 것처럼 보이는 자료에서 상관계수를 계산할 수 있겠으나 의미가 없다. | . - 교훈2: 기본적인 통계량들은 실제자료를 분석하기에 부적절할 수 있다. (=통계량은 적절한 가정이 동반되어야 의미가 있다.) . . Note: 통계학자는 (1) 적절한 가정을 수학적인 언어로 정의하고 (2) 그 가정하에서 통계량이 의미있다는 것을 증명해야 한다. (3) 그리고 그 결과를 시각화하여 설득한다. .",
            "url": "https://pinkocto.github.io/dinonene/2021/12/31/%EC%97%AC%EB%9F%AC%EA%B7%B8%EB%A6%BC%EA%B7%B8%EB%A6%AC%EA%B8%B0.html",
            "relUrl": "/2021/12/31/%EC%97%AC%EB%9F%AC%EA%B7%B8%EB%A6%BC%EA%B7%B8%EB%A6%AC%EA%B8%B0.html",
            "date": " • Dec 31, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "벡터미분",
            "content": "(&#51221;&#51032;1) $ frac{ partial}{ partial bf{y}}:= begin{bmatrix} frac{ partial}{ partial y_1} dots frac{ partial}{ partial y_n} end{bmatrix}$. . 단, ${ bf{y}}= begin{bmatrix}y_1 dots y_n end{bmatrix}$. 즉 ${ bf{y}}$는 $n times 1$ vector. | . (&#51221;&#51032;2) $ frac{ partial}{ partial{ bf X}}:= begin{bmatrix} . frac{ partial}{ partial x{11}} &amp; dots &amp; frac{ partial}{ partial x{1p}} dots &amp; dots &amp; dots frac{ partial}{ partial x{n1}} &amp; dots &amp; frac{ partial}{ partial x{np}} end{bmatrix}$ . 단, ${ bf{X}}= begin{bmatrix} x_{11} &amp; dots &amp; x_{1p} dots &amp; dots &amp; dots x_{n1} &amp; dots &amp; x_{np} end{bmatrix}$. 즉 $ bf{X}$는 $n times p$ matrix. | . (1) $ frac{ partial bf{x}^ top y}{ partial bf{x}}= frac{ partial bf{y}^ top x}{ partial bf{x}}= bf{y}$. . (2) $ frac{ partial bf{y} top{ bf{X}}{ boldsymbol{ beta}}}{ partial { boldsymbol{ beta}}}= bf{X}^ top{ bf{y}}$. . (3) $ frac{ partial bf{y}^ top y}{ partial bf{y}}=2{ bf{y}}$. . (4) $ frac{ partial boldsymbol{ beta}^ top bf{X}^ top bf{X} boldsymbol{ beta}}{ partial boldsymbol{ beta}}=2 bf{X}^ top X boldsymbol{ beta}$. . . &#45796;&#51473;&#49440;&#54805;&#54924;&#44480; . given data: $ {y_i,x_{i1},x_{i2}, dots,x_{ip} }_{i=1}^{n}$. | . 모형(표현1): $y_i= beta_0+ beta_1x_{i1}+ dots+ beta_px_{ip}+ epsilon_i $ | . 모형(표현2): $y_i={ bf{x}}_i^ top boldsymbol{ beta}+ epsilon_i $. . 단, ${ bf{x}}_i= begin{bmatrix}1 x_{i1} dots x_{ip} end{bmatrix}$, $ { boldsymbol{ beta}}= begin{bmatrix} beta_0 dots beta_p end{bmatrix}$. | . | . 모형(표현3): $ bf y=X boldsymbol{ beta} + boldsymbol{ epsilon}$. . 단, ${ bf y}= begin{bmatrix}y_1 dots y_n end{bmatrix}$, ${ bf X}= begin{bmatrix} bf x_1^ top dots bf x_n^ top end{bmatrix}= begin{bmatrix} 1 &amp; x_{11} &amp; dots &amp; x_{1p} dots &amp; dots &amp; dots &amp; dots 1 &amp; x_{n1} &amp; dots &amp; x_{np} end{bmatrix}$. | . | . 훈련오차: $L( boldsymbol{ beta})= frac{1}{2}( bf y -X boldsymbol{ beta})^ top(y-X boldsymbol{ beta})$ | . 목적: 훈련오차를 최소화하는 $ boldsymbol{ hat{ beta}}$를 구하자. | . $ boldsymbol{ beta}$ 해석해: $ hat{ boldsymbol{ beta}}=( bf X^ top X)^{-1}X^ top y$. | . [예제] 다음과 같은 관측치를 얻었다고 가정하자. . xdata=[-1.13,-0.9,-0.08,0.13,0.18,0.71,1.59] ydata=[-1.43,-0.42,0.96,1.66,1.3,2.4,4.14] . $y$를 $x$에 회귀하라. . (풀이1) . import matplotlib.pyplot as plt . plt.plot(xdata,ydata,&#39;x&#39;) #plt.plot(xdata,np.array(ydata)**2,&#39;x&#39;) . [&lt;matplotlib.lines.Line2D at 0x11509b0e8e0&gt;] . 자료가 선형이므로, 회귀분석을 쓰기에 적절해 보인다. . import numpy as np . np.zeros(len(xdata))+1 # xdata의 길이만큼 1 . array([1., 1., 1., 1., 1., 1., 1.]) . np.zeros(len(xdata))+1,xdata . (array([1., 1., 1., 1., 1., 1., 1.]), [-1.13, -0.9, -0.08, 0.13, 0.18, 0.71, 1.59]) . X=np.matrix([np.zeros(len(xdata))+1,xdata]).T y=np.matrix(ydata).T # n by 1 . βhat=(X.T*X).I*X.T * y . βhat . matrix([[1.09047407], [1.95336302]]) . yhat=X*βhat . yhat . matrix([[-1.11682614], [-0.66755265], [ 0.93420503], [ 1.34441126], [ 1.44207941], [ 2.47736182], [ 4.19632127]]) . plt.plot(xdata,ydata,&#39;x&#39;) plt.plot(xdata,yhat,&#39;--&#39;) ## 회귀선 . [&lt;matplotlib.lines.Line2D at 0x1150a031940&gt;] . (풀이2) . from sklearn.linear_model import LinearRegression . linreg = LinearRegression().fit(X,y) ## 모델 적합 . linreg.coef_ #상수항은 intercept_항 . array([[0. , 1.95336302]]) . linreg.intercept_ ## 상수항 . array([1.09047407]) . linreg.predict(X) . array([[-1.11682614], [-0.66755265], [ 0.93420503], [ 1.34441126], [ 1.44207941], [ 2.47736182], [ 4.19632127]]) . plt.plot(xdata,ydata,&#39;x&#39;) plt.plot(xdata,linreg.predict(X),&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x1150c471d60&gt;] . (풀이3) . import rpy2 %load_ext rpy2.ipython . C: Anaconda3 envs py38r40 lib site-packages rpy2 robjects packages.py:366: UserWarning: The symbol &#39;quartz&#39; is not in this R namespace/package. warnings.warn( . %%R c(1,2,3,4) . [1] 1 2 3 4 . %R -i X,y ## 변수를 넘겨주는 작업(X,y가 파이썬에 있는데 이것을 R로 넘겨줘라) 그럼 파이썬에서 정의했던 변수가 R에서도 사용가능! . %%R bhat&lt;- solve(t(X)%*%X)%*%t(X)%*%y bhat . [,1] [1,] 1.090474 [2,] 1.953363 . %%R X . [,1] [,2] [1,] 1 -1.13 [2,] 1 -0.90 [3,] 1 -0.08 [4,] 1 0.13 [5,] 1 0.18 [6,] 1 0.71 [7,] 1 1.59 . %%R xdata&lt;-X[,2] ydata&lt;-y[,1] . %%R plot(xdata,ydata) lines(xdata,X%*%bhat,col=2,lty=2) . (풀이4) . %%R lm(ydata~xdata) . Call: lm(formula = ydata ~ xdata) Coefficients: (Intercept) xdata 1.090 1.953 . %%R lm(ydata~xdata)$fitted.values . 1 2 3 4 5 6 7 -1.1168261 -0.6675526 0.9342050 1.3444113 1.4420794 2.4773618 4.1963213 . %%R plot(xdata,ydata) lines(xdata,lm(ydata~xdata)$fitted.values,col=2,lty=2) . %%R summary(lm(ydata~xdata)) . Call: lm(formula = ydata ~ xdata) Residuals: 1 2 3 4 5 6 7 -0.31317 0.24755 0.02579 0.31559 -0.14208 -0.07736 -0.05632 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 1.09047 0.09118 11.96 7.21e-05 *** xdata 1.95336 0.10605 18.42 8.67e-06 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 0.2404 on 5 degrees of freedom Multiple R-squared: 0.9855, Adjusted R-squared: 0.9826 F-statistic: 339.3 on 1 and 5 DF, p-value: 8.675e-06 . %%R plot(lm(ydata~xdata)) .",
            "url": "https://pinkocto.github.io/dinonene/2021/12/31/note1_0308(2).html",
            "relUrl": "/2021/12/31/note1_0308(2).html",
            "date": " • Dec 31, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://pinkocto.github.io/dinonene/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://pinkocto.github.io/dinonene/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "수상 . 프로젝트 . 프로그래밍 스킬 . - Python . - R . - SPSS . 봉사활동 . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://pinkocto.github.io/dinonene/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://pinkocto.github.io/dinonene/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}